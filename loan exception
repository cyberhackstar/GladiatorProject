package com.examly.springapp.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.examly.springapp.exception.ResourceNotFoundException;
import com.examly.springapp.exception.UserNotFoundException;
import com.examly.springapp.model.Feedback;
import com.examly.springapp.model.User;
import com.examly.springapp.repository.FeedbackRepo;
import com.examly.springapp.repository.UserRepo;

@Service
public class FeedbackServiceImpl implements FeedbackService {

    @Autowired
    private FeedbackRepo feedbackRepo;

    @Autowired 
    private UserRepo userRepo;

    @Override
    public Feedback addFeedback(Feedback feedback) {
        if (feedback.getUser() == null) {
            throw new IllegalArgumentException("User information is required to add feedback.");
        }
        int userId = feedback.getUser().getUserId();
        User u = userRepo.findById(userId)
                .orElseThrow(() -> new UserNotFoundException("User with ID " + userId + " not found"));
        feedback.setUser(u);
        return feedbackRepo.save(feedback);
    }

    @Override
    public Feedback getFeedbackByUserId(int userId) {
        return feedbackRepo.getByUserUserId(userId);
    }
  
    @Override
    public List<Feedback> getAllFeedbacks() {
        return feedbackRepo.findAll();
    }

    @Override
    public Optional<Feedback> getFeedbackById(Long id) {
        return Optional.ofNullable(feedbackRepo.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Feedback with ID " + id + " not found")));
    }

    @Override
    public Feedback updateFeedback(Long id, Feedback updatedFeedback) {
        if (!feedbackRepo.existsById(id)) {
            throw new ResourceNotFoundException("Feedback with ID " + id + " not found for update");
        }
        updatedFeedback.setFeedbackId(id);
        return feedbackRepo.save(updatedFeedback);
    }

    @Override
    public Feedback deleteFeed(Long id) {
        Feedback oldFeedback = feedbackRepo.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Feedback with ID " + id + " not found for deletion"));
        feedbackRepo.deleteById(id);
        return oldFeedback;
    }
}
